<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tac42.net]]></title>
  <link href="https://www.tac42.net/atom.xml" rel="self"/>
  <link href="https://www.tac42.net/"/>
  <updated>2016-03-29T00:53:08+09:00</updated>
  <id>https://www.tac42.net/</id>
  <author>
    <name><![CDATA[TAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.8(プロトタイプを作ろう)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/28/makeonlinejudgev08/"/>
    <updated>2016-03-28T22:22:25+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/28/makeonlinejudgev08</id>
    <content type="html"><![CDATA[<h1>まずはプロトタイプ</h1>

<p>前回なんとかDockerで実行環境兼開発環境を構築できました。
とにかく早く作ってみたいので、プロトタイプという体で手を動かしてみます。
どうせ作り直したくなってくるので、最初は適当にやってみようというかんじ。死にゲー。</p>

<h2>Expressの環境構築</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm use v5.9.0
</span><span class='line'>$ npm init
</span><span class='line'>$ npm install --save-dev express</span></code></pre></td></tr></table></div></figure>


<p><code>--save-dev</code> オプションを付けておくと、インストールしたパッケージを<code>package.js</code>へ自動で追記してくれます。便利！</p>

<h2>アプリを書いてみる</h2>

<p><code>app.js</code> という名前で以下のファイルを作った。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// receive http request</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello, World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// launch server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">address</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Judge server is started at http://%s:%s&quot;</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、できあがったのがこれ。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_app_prototype">tac0x2a/judgesv_app_prototype</a></li>
</ul>


<h2>実行してみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">node</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//:::3000</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">,</span> <span class="nx">World</span>
</span></code></pre></td></tr></table></div></figure>


<p>おおお、動いてる！</p>

<h1>Dockerで動かす</h1>

<p>これまでは直接Macで動かしていましたが、前回作ったDockerの実行環境で動かしてみます。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">git</span><span class="err">@</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">:</span><span class="nx">tac0x2a</span><span class="o">/</span><span class="nx">judgesv_devenv</span><span class="p">.</span><span class="nx">git</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">judgesv_devenv</span><span class="o">/</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">git</span><span class="err">@</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">:</span><span class="nx">tac0x2a</span><span class="o">/</span><span class="nx">judgesv_app_prototype</span><span class="p">.</span><span class="nx">git</span> <span class="nx">data</span><span class="o">/</span><span class="nx">work</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span><span class="o">-</span><span class="nx">compose</span> <span class="nx">build</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span><span class="o">-</span><span class="nx">compose</span> <span class="nx">pull</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">docker</span><span class="o">-</span><span class="nx">compose</span> <span class="nx">up</span> <span class="o">-</span><span class="nx">d</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data/work</code> が DataVolumeになっており、コンテナの <code>/home/devenv/work</code> にマウントされて、<code>node app.js</code> で実行されます。</p>

<p>エントリポイントが<code>app.js</code> 固定になってて気持ち悪いですが、何か設定ファイル等で指定する方法があるんだと思います。そのうち調べます。</p>

<p>はい、今回はここまで〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.7(Dockerによる開発環境)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/27/makeonlinejudgev07/"/>
    <updated>2016-03-27T23:23:06+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/27/makeonlinejudgev07</id>
    <content type="html"><![CDATA[<h1>開発環境を作る</h1>

<p>とりあえず、Node.js, Express, MongoDBが動作する環境を作る。
他環境へ持って行ったり、どこかで自動テストできるように、
以下を参考にしながら開発/実行環境をDockerで作る。</p>

<ul>
<li><a href="http://blog.muuny-blue.info/7d128c1d4a33165a8676d1650d8ff828.html">docker-composeを使って最高の開発環境を手に入れた</a></li>
</ul>


<p>上記を参考に作ったらこんなかんじになった。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<h1>ところが・・・</h1>

<p>MongoDBのVolumeマウントでハマった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2016-03-27T16:58:37.013+0000 I CONTROL  [initandlisten] options: {}
</span><span class='line'>2016-03-27T16:58:37.069+0000 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
</span><span class='line'>2016-03-27T16:58:37.069+0000 I CONTROL  [initandlisten] dbexit:  rc: 100</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://qiita.com/ota42y/items/af90ada86fd671dc5122">MacのDocker上で動くMongoDBのデータを永続化するの大変そう</a></li>
</ul>


<blockquote><p>MongoDBはVirtualBoxの共有フォルダはサポートしていないようです。</p></blockquote>

<p>どうしよ。。。</p>

<h1>2016/03/28 追記</h1>

<p>mongoのイメージはそれほど頻繁に更新されんだろうと踏んで、とりあえずMongoDBはDataVolumeを諦めることに。</p>

<p>次回からいよいよアプリを作りますよー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.6(Node.jsとExpress)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/26/makeonlinejudgev06/"/>
    <updated>2016-03-26T15:49:39+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/26/makeonlinejudgev06</id>
    <content type="html"><![CDATA[<p>前回はフロントエンドとしてAngular2のチュートリアルを軽く触ってみました。
今回はNode.js + Expressでバックエンドの環境を触ってみようと思います！</p>

<h1>Node.js</h1>

<p>どちらもちょっと古め。WebアプリのフレームワークとしてExpressを紹介している。
+ <a href="http://gihyo.jp/dev/serial/01/nodejs/0001">基礎から学ぶNode.js</a>
+ <a href="http://libro.tuyano.com/index2?id=1115003">ビギナーのための Node.jsプログラミング入門</a></p>

<h1>Express</h1>

<ul>
<li><a href="https://gist.github.com/mitsuruog/fc48397a8e80f051a145">express実践入門</a> - めちゃわかりやすい！</li>
</ul>


<blockquote><p>expressを理解する上での最小構成要素。
+ routing -
  外部からのHTTP(S)リクエストに対して、内部のロジックをマッピングすること。</p>

<ul>
<li>middleware -
routingの過程で何らかの処理を差し込む仕組み。
共通処理(認証、エラーハンドリング、リクエストデータの加工、etc)を本来のロジッ> クから分離して、コードベースを健全に保つ。</li>
</ul>
</blockquote>

<h2>Expressのキーワード</h2>

<ul>
<li>Jade - デファクトなテンプレートエンジン</li>
<li>Mongoose - MongoDBなORM</li>
<li>Sequelize - PostgreSQL, MySQL, SQLite, MSSQL なORM</li>
<li>Passport - node.jsの認証モジュールでデファクト</li>
</ul>


<h1>まとめ</h1>

<p>なんか作れそうな気がしてきた！
当面の方針として、Expressで作ってみて、フロントエンドをリッチにしたくなってきたらAngular2なりReactなりでViewを強化するようにしてみよう。
まずは、Node.js(Express)とDockerで</p>

<ul>
<li>ユーザ登録/認証</li>
<li>問題の登録

<ul>
<li>テストの登録</li>
</ul>
</li>
<li>回答の登録

<ul>
<li>ユーザごとの回答の履歴</li>
</ul>
</li>
<li>送信された回答とテストの実行</li>
</ul>


<p>このあたりを作りたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.5(Atom設定)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/26/makeonlinejudgev05/"/>
    <updated>2016-03-26T01:19:06+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/26/makeonlinejudgev05</id>
    <content type="html"><![CDATA[<h1>パッケージ</h1>

<ul>
<li>sync-settings - <a href="http://qiita.com/T_M/items/0fb0804eb1fd256aac4e">Atomの設定を同期する</a>。</li>
<li>atomic-emacs - Emacsのキーバインド</li>
<li>emacs-plus   - Emacsのキーバインド</li>
<li>disable-keybindings - Emacsのキーバインドとぶつかっているキーを無効にする。</li>
<li>ruby-block - Rubyのblockをハイライトしてくれる</li>
<li>file-icons - ファイルツリーのアイコンを見やすく</li>
<li>project-manager - 複数プロジェクトを記憶して切り替える</li>
<li><a href="https://atom.io/packages/minimap">minimap</a> - スクロールバーの位置にソースコードの全体像を表示する</li>
<li>atom-typescript - TypeScript用のplugin. 機能多すぎてよくわからんけど凄い</li>
</ul>


<p>コマンドでインストールするには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apm install sync-settings
</span><span class='line'>apm install atomic-emacs
</span><span class='line'>apm install emacs-plus
</span><span class='line'>apm install disable-keybindings
</span><span class='line'>apm install ruby-block
</span><span class='line'>apm install file-icons
</span><span class='line'>apm install project-manager</span></code></pre></td></tr></table></div></figure>


<h2>sync-settings</h2>

<ul>
<li>GistのIDとGitHubのAccessTokenをそれぞれ設定する。</li>
<li>コマンドパレットを開いて(<code>Cmd+Shift+p</code>) <code>Sync Settings:Restore</code> でgistから設定をリストアする。</li>
</ul>


<h2>disable-keybindings</h2>

<ul>
<li>All Community Packages にチェック入れる。</li>
<li>Except Community Packages に <code>atomic-emacs, emacs-plus</code> を設定する。</li>
<li>Prefix Keys に <code>ctrl-k</code> を設定する。</li>
</ul>


<h1>テーマ</h1>

<h2><code>robin-hood-syntax</code></h2>

<p><img src="https://i.github-camo.com/ab5bd775f86c75113818f712d96c55ba934e1cf8/68747470733a2f2f6769746875622e636f6d2f617a61742d696f2f61746f6d2d726f62696e2d686f6f642d73796e7461782f626c6f622f6d61737465722f696d616765732f68746d6c2e706e673f7261773d74727565" alt="" />
<img src="https://i.github-camo.com/e16edf8a04d83900fd3cb9d6907fe8b677e051e7/68747470733a2f2f6769746875622e636f6d2f617a61742d696f2f61746f6d2d726f62696e2d686f6f642d73796e7461782f626c6f622f6d61737465722f696d616765732f6373732e706e673f7261773d74727565" alt="" /></p>

<h1>その他</h1>

<p>Markdownプレビューのフォントを変更する。
+ AP<a href="http://tanksuzuki.com/post/atom-markdown-style/">AtomでカッコよくMarkdown PreviewするためのCSS</a></p>

<p>ここまで。気が向いたら追記する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.4(Angular2入門)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/23/makeonlinejudgev04/"/>
    <updated>2016-03-23T23:57:43+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/23/makeonlinejudgev04</id>
    <content type="html"><![CDATA[<h1>Angular2 入門</h1>

<p>とりあえずAngular2を触ってみよう。合わなければやめる方向で。</p>

<p><a href="https://angular.io/docs/ts/latest/tutorial/">TUTORIAL: TOUR OF HEROES</a></p>

<h2>環境構築</h2>

<p>そもそも nodeとnpmが入ってないので入れる。
nvm(NodeVersionManager)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% brew install nvm</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Add NVM's working directory to your $HOME path (if it doesn't exist):
</span><span class='line'>
</span><span class='line'>  mkdir ~/.nvm
</span><span class='line'>
</span><span class='line'>Copy nvm-exec to NVM's working directory
</span><span class='line'>
</span><span class='line'>  cp $(brew --prefix nvm)/nvm-exec ~/.nvm/
</span><span class='line'>
</span><span class='line'>Add the following to $HOME/.bashrc, $HOME/.zshrc, or your shell's
</span><span class='line'>equivalent configuration file:
</span><span class='line'>
</span><span class='line'>  export NVM_DIR=~/.nvm
</span><span class='line'>  source $(brew --prefix nvm)/nvm.sh
</span><span class='line'>
</span><span class='line'>Type `nvm help` for further information.</span></code></pre></td></tr></table></div></figure>


<p>と言われたので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkdir ~/.nvm
</span><span class='line'>% cp $(brew --prefix nvm)/nvm-exec ~/.nvm/
</span><span class='line'>% echo 'export NVM_DIR=~/.nvm' &gt;&gt; .zshrc.mine
</span><span class='line'>% echo 'source $(brew --prefix nvm)/nvm.sh'  &gt;&gt; .zshrc.mine
</span><span class='line'>% soruce ~/.zshrc</span></code></pre></td></tr></table></div></figure>


<p>これで nvm が使えるようになった。nodeをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% nvm --version
</span><span class='line'>% nvm ls-remote #利用可能なnodeのバージョン
</span><span class='line'>% nvm install v5.9.0  #一番新しそうなver</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% node -v
</span><span class='line'>v5.9.0
</span><span class='line'>
</span><span class='line'>% npm -v
</span><span class='line'>3.7.3</span></code></pre></td></tr></table></div></figure>


<h2>いよいよチュートリアル</h2>

<p><a href="https://angular.io/docs/ts/latest/quickstart.html">5 MIN QUICKSTART</a>
全然5分ぢゃない・・・</p>

<p>まずは環境構築。<code>tsconfig.json</code>, <code>typings.json</code>, <code>package.json</code> を用意して・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install</span></code></pre></td></tr></table></div></figure>


<p><code>app/app.component.ts</code>, <code>app/main.ts</code>, <code>index.html</code>, <code>style.css</code>, を追加して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm start</span></code></pre></td></tr></table></div></figure>


<p>上記で、"My First Angular 2 App" が表示されることを確認。動いてるっぽい。</p>

<p>今回はとりあえずここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.3(Golangのフレームワーク)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/23/makeonlinejudgev03/"/>
    <updated>2016-03-23T00:19:24+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/23/makeonlinejudgev03</id>
    <content type="html"><![CDATA[<h1>フレームワークを選ぶ(Golang編)</h1>

<p>GoでWebアプリを書くためのフレームワークを調べました。</p>

<ul>
<li><a href="https://revel.github.io/">Revel</a></li>
<li><a href="http://beego.me/">Beego</a></li>
<li><a href="https://github.com/go-martini/martini/blob/master/translations/README_ja_JP.md">Martini</a></li>
<li><a href="https://github.com/zenazn/goji">goji</a></li>
</ul>


<script type="text/javascript" src="//www.google.co.jp/trends/embed.js?hl=ja&q=Revel+golang,+Beego+Golang,+Martini+Golang,+goji+Golang&date=1/2015+12m&cmpt=q&tz=Etc/GMT-9&tz=Etc/GMT-9&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=800&h=330"></script>


<p>戦国時代ですね。</p>

<h2>まとめ</h2>

<p>調べてみたけど、これというフレームワークはあまあり無いみたいですね。。。気が向いたら追記します。
フレームワークは<a href="http://www.tac42.net/blog/2016/03/22/makeonlinejudgev02/">前回</a>調べたMEAN(MongoDB+Express+Angular2+Node.js)にしよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.2(Javascriptのフレームワーク)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/22/makeonlinejudgev02/"/>
    <updated>2016-03-22T19:43:37+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/22/makeonlinejudgev02</id>
    <content type="html"><![CDATA[<h1>フレームワークを選ぶ(Javascript編)</h1>

<p>JavascriptでWebアプリを書くためのフレームワークを調べました。</p>

<ul>
<li><a href="http://www.buildinsider.net/web/popularjslib/2016">人気上昇中のJavaScriptライブラリを調べてみた【2016年版】</a></li>
</ul>


<h2><a href="https://angularjs.org/">AngularJS</a></h2>

<p><img src="http://staffblog.yumemi.jp/wp-content/uploads/2014/03/AngularJS-large.png" alt="AngularJS" /></p>

<ul>
<li><a href="http://www.tohoho-web.com/ex/angularjs.html">AngularJS入門</a></li>
</ul>


<blockquote><p>これまでのWebサービスでは、サーバ側で画面(HTML/DOM)を生成していたのに対し、最近のWebサービスでは、サーバ側はDB操作のみを処理し、クライアント－サーバ間をAjaxでJSON交換し、画面(HTML/DOM)はクライアント側で生成する方式が増えてきました。AngularJSは、クライアント側 JavaScript のコントローラでデータモデルを管理し、画面(ビュー)とリアルタイムにデータを交換するのに適したフレームワークです。</p></blockquote>

<p>なるほど、MVCのVに相当する部分を全部クライアントでやっちゃおうという感じですね。
PHPやJSPみたいに、htmlに埋め込んで記述するみたいです。</p>

<p>サーバ側ではJSONをやりとりするバックエンドの実装が必要になります。</p>

<p>このバックエンドとしてRails(の特にActiveRecord)が挙げられていましたが、
Node.js上で動く<a href="http://expressjs.com/">Express</a>というフレームワークと、MongoDBと組み合わせた、MEAN(MongoDB+Express+AngularJS+Node.js)という構成が有名みたいです。</p>

<p>MEANを構築するには、Yeomanというワークフロー構築ツールを使うのが一般的みたいです。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1407/02/news040.html">あなたのWeb開発人生を変えるYeoman、Bower、Yoのインストールと使い方</a></li>
</ul>


<p>YoemanはWebフロントエンドでよくある構成を、Railsでいうscaffoldのようにコマンドで生成するツールです。
Grunt(make的なビルドツール), Bower(パッケージマネージャ), Yo(プロジェクトの雛形生成ツール)で構成されています。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1503/04/news047.html">Node.jsのMVCフレームワーク「Express」の基礎知識とインストール</a></li>
</ul>


<p>npmで <code>generator-angular-fullstack</code> を入れるだけで、ExpressやらKarma(実ブラウザでJavaScriptコードを実行できる実行環境,テストランナー)やらPassport(node.jsの認証ミドルウェア)が使えるようになるみたいです。</p>

<ul>
<li><a href="http://blog.mah-lab.com/2014/02/01/angular-fullstack/">AngularJSでWebアプリケーションを作ろうと思った時に構成に悩んだら、generator-angular-fullstackからはじめるのが良いのでは</a></li>
</ul>


<p><a href="https://html5experts.jp/technohippy/18040/">Firebase</a> というBaaS(Backend as a Service)もあるみたいです。</p>

<h2><a href="https://angular.io">Angular2</a></h2>

<p><img src="http://blog.ninja-squad.com/assets/images/ng2-ebook/ng2-logo.png" alt="Angular2" /></p>

<ul>
<li><a href="https://developers.eure.jp/tech/angular2_evaluation/">Angular2は「使える」フレームワークか？</a></li>
</ul>


<p>AngularJSと比較して、劇的にスピードアップし、実装がJavascriptからTypeScriptベースになったそうです。
今始めるならこちらかも。</p>

<ul>
<li><a href="http://rdlabo.jp/angular2-373.php">[初心者向け] Angular2からみるJSフレームワーク入門</a></li>
</ul>


<h2>React</h2>

<p><img src="http://res.cloudinary.com/hashnode/image/upload/v1455637506/static_imgs/mern/imgs/react.png" alt="React" /></p>

<ul>
<li><a href="http://qiita.com/tomzoh/items/7fabe7cb57dd96425867">5分で理解する React.js</a></li>
</ul>


<p>AngularJSと比較されることの多いフレームワーク。こちらもMVCのVに相当する。違いとしては・・・</p>

<blockquote><p>ReactではすべてをJSで書き切ることができるのに対して、AngularはHTMLを拡張した独自の記法を使う必要があります。</p></blockquote>

<p>というかんじらしい。</p>

<h2>まとめ</h2>

<p>MEAN(MongoDB, Express, Angular2, Node.js)が良さそう。</p>

<p>今回はここまで。次回は別の言語のフレームワークを調べようかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オンラインジャッジを作ろう vol.1(構想)]]></title>
    <link href="https://www.tac42.net/blog/2016/03/21/makeonlinejudgev01/"/>
    <updated>2016-03-21T23:32:05+09:00</updated>
    <id>https://www.tac42.net/blog/2016/03/21/makeonlinejudgev01</id>
    <content type="html"><![CDATA[<p>作ろう！</p>

<h1>オンラインジャッジって？</h1>

<p><a href="https://paiza.jp/">Paiza</a>や<a href="https://codeiq.jp/">CodeIQ</a>、<a href="http://jp.topcoder.com/">TopCoder</a>などのプログラミングコンテストで、提出されたコードを実行して採点するシステムのこと。</p>

<h1>構想</h1>

<p>特に難しいことを考えなければこんなかんじ？</p>

<ul>
<li><strong>Webアプリケーション</strong> - 問題の管理やコード受付をするよ</li>
<li><strong>ジャッジサーバ</strong> - コードのビルドと実行をするよ</li>
<li><strong>データベース</strong> - プレイヤーの情報、問題、実行結果など、いろんなデータを格納するよ</li>
</ul>


<p>せっかくなので全部Dockerコンテナで作るよ！</p>

<h1>やりたいこと</h1>

<h2>アプリケーションとして配布したい！</h2>

<p>会社や学校でプロコンの大会を開催したいけど、外部サービスは利用できない・・・ありますよね！</p>

<p>そこで、Webアプリケーションとして配布して、誰でもプライベートなマシンにセットアップ出来るようにしたい。
<code>docker run</code> するだけでセットアップ＆実行できるようなイメージ。</p>

<h2>Dockerを使いたい！</h2>

<p>イメージで配布して簡単に導入できるようにしたい！
あと、とにかく使ってみたい！細けぇことはいいんだよ！</p>

<h2>Ruby以外の言語で作りたい！</h2>

<p>そろそろ別の言語もまともに使えるようになりたい・・・！
候補としては、Node.js, Go, Scala, Pythonの順かな。</p>

<h2>エディタ乗り換えたい</h2>

<p>大学で悪い先輩に捕まって以来、Emacsを使い続けてきましたが、別のエディタに乗り換えようと思っています。
候補はAtomです。</p>

<h2>毎日、早く帰って続きを作りたい！と思えること</h2>

<p>これめちゃ重要。去年ライブラリ作ってるときはこの状態でした。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">快楽を得る方法をドラッグから瞑想から娯楽から貪欲に調べまくったら、最高に人間の快楽を刺激し続けれるのは毎日規則正しく生活しながら一つの目に見える物をコツコツ作り続けて気の合う人と馬鹿なことやるっていうライフスタイルだという結論が出たことを快楽主義者各位は重く受け止めて下さい。</p>&mdash; ぐっちょむ (@gutchom) <a href="https://twitter.com/gutchom/status/375886913804058626">2013年9月6日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="https://twitter.com/gutchom/status/375886913804058626">https://twitter.com/gutchom/status/375886913804058626</a></p>

<p>この状態が継続するよう、コツコツ続けたい。毎日が本当に楽しくなる！</p>

<h1>進め方</h1>

<p>インタフェースなど考えながらボトムアップに進めたい。
秋頃にリリースできるといいなー。</p>

<ol>
<li>ジャッジサーバの構築</li>
<li>Webアプリケーション + データベースの構築</li>
</ol>


<h1>最後に</h1>

<p>こんなかんじでコツコツやっていきます。
とりあえず、第一回は構想だけですね。
おしまい〜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPi2をセットアップする]]></title>
    <link href="https://www.tac42.net/blog/tech/2016/01/05/raspberrypi-setup/"/>
    <updated>2016-01-05T01:42:19+09:00</updated>
    <id>https://www.tac42.net/blog/tech/2016/01/05/raspberrypi-setup</id>
    <content type="html"><![CDATA[<p><img src="https://www.tac42.net/assets/blog/2016-01-05-raspberrypi-setup/raspi.jpg" alt="RaspberryPi" /></p>

<p>すごい今更感ありますが、Raspberry Pi2 Model B を買ってしまったのでセットアップしたメモ．
sshするところまで．</p>

<h1>イメージの書き込み</h1>

<p>OSイメージをmicroSDへ書き込む．使用OSごとの書き込み方法は<a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">こちら</a>を参照．</p>

<p>イメージをダウンロード．今回使用したのは RASPBIAN JESSIE で、1.3GBくらい．なかなか落ちてこない．
<a href="https://www.raspberrypi.org/downloads/raspbian/">Download Raspbian for RaspberryPi</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>unzip 2015-11-21-raspbian-jessie.zip
</span></code></pre></td></tr></table></div></figure>


<p>書き込みたいディスクを確認．別なディスクに書き込むと大変なことになるので慎重に．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>diskutil list
</span><span class='line'>/dev/disk0 <span class="o">(</span>internal, physical<span class="o">)</span>:
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:      GUID_partition_scheme                        *121.3 GB   disk0
</span><span class='line'>   1:                        EFI EFI                     209.7 MB   disk0s1
</span><span class='line'>   2:          Apple_CoreStorage Macintosh HD            121.0 GB   disk0s2
</span><span class='line'>   3:                 Apple_Boot Boot OS X               134.2 MB   disk0s3
</span><span class='line'>/dev/disk1 <span class="o">(</span>internal, physical<span class="o">)</span>:
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:      GUID_partition_scheme                        *1.0 TB     disk1
</span><span class='line'>   1:                        EFI EFI                     209.7 MB   disk1s1
</span><span class='line'>   2:          Apple_CoreStorage Macintosh HD            999.3 GB   disk1s2
</span><span class='line'>   3:                 Apple_Boot Recovery HD             650.1 MB   disk1s3
</span><span class='line'>/dev/disk2 <span class="o">(</span>internal, virtual<span class="o">)</span>:
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:                  Apple_HFS Macintosh HD           +1.1 TB     disk2
</span><span class='line'>                                 Logical Volume on disk0s2, disk1s2
</span><span class='line'>                                 D17EF55D-4792-45E2-A2A1-BA52348E9108
</span><span class='line'>                                 Unencrypted Fusion Drive
</span><span class='line'>/dev/disk5 <span class="o">(</span>external, physical<span class="o">)</span>:
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:     FDisk_partition_scheme                        *31.9 GB    disk5
</span><span class='line'>   1:             Windows_FAT_32 NO NAME                 31.9 GB    disk5s1
</span></code></pre></td></tr></table></div></figure>


<p>/dev/disk5 っぽい．<code>dd</code>で書き込む．めっちゃ時間かかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>diskutil unmountDisk /dev/disk5
</span><span class='line'>Unmount of all volumes on disk5 was successful
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo dd <span class="nv">bs</span><span class="o">=</span>1m <span class="k">if</span><span class="o">=</span>2015-11-21-raspbian-jessie.img  <span class="nv">of</span><span class="o">=</span>/dev/disk5
</span><span class='line'>3752+0 records in
</span><span class='line'>3752+0 records out
</span><span class='line'><span class="m">3934257152</span> bytes transferred in 1713.306842 secs <span class="o">(</span><span class="m">2296295</span> bytes/sec<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>30分近くかかってたらしい．</p>

<p>書き込み終わったmicroSDをRaspberryPi2に差し込んで起動する．</p>

<h1>シリアル接続</h1>

<h2>シリアルドライバのインストール</h2>

<p><a href="http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;pcid=41">ここ</a>からドライバをダウンロード．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>unzip PL2303_MacOSX_1_6_0_20151022.zip
</span></code></pre></td></tr></table></div></figure>


<p>出てきたpkgファイルをダブルクリックして実行．PCを再起動する．</p>

<h2>接続</h2>

<p>ボーレートは115200．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo cu -s <span class="m">115200</span> -l /dev/tty.usbserial
</span><span class='line'>Connected.
</span><span class='line'>
</span><span class='line'>Raspbian GNU/Linux <span class="m">8</span> raspberrypi ttyAMA0
</span><span class='line'>
</span><span class='line'>raspberrypi login:
</span></code></pre></td></tr></table></div></figure>


<p>ユーザ名は &ldquo;pi&rdquo;, パスワードは &ldquo;raspberry&rdquo; でログイン．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Last login: Sat Nov <span class="m">21</span> 21:35:31 UTC <span class="m">2015</span> on tty1
</span><span class='line'>Linux raspberrypi 4.1.13-v7+ <span class="c">#826 SMP PREEMPT Fri Nov 13 20:19:03 GMT 2015 armv7l</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for</span> each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>pi@raspberrypi:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>ログインできた．最初からRubyとかgitとか入っててすごい．．．</p>

<h2>初期設定</h2>

<p>ファイルシステム拡張とSSHを有効にする．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pi@raspberrypi:~$ sudo raspi-config
</span><span class='line'>┌─────────┤ Raspberry Pi Software Configuration Tool (raspi-config) ├──────────┐
</span><span class='line'>│                                                                              │
</span><span class='line'>│    1 Expand Filesystem              Ensures that all of the SD card s        │
</span><span class='line'>│    2 Change User Password           Change password for the default u        │
</span><span class='line'>│    3 Boot Options                   Choose whether to boot into a des        │
</span><span class='line'>│    4 Wait for Network at Boot       Choose whether to wait for networ        │
</span><span class='line'>│    5 Internationalisation Options   Set up language and regional sett        │
</span><span class='line'>│    6 Enable Camera                  Enable this Pi to work with the R        │
</span><span class='line'>│    7 Add to Rastrack                Add this Pi to the online Raspber        │
</span><span class='line'>│    8 Overclock                      Configure overclocking for your P        │
</span><span class='line'>│    9 Advanced Options               Configure advanced settings              │
</span><span class='line'>│    0 About raspi-config             Information about this configurat        │
</span><span class='line'>│                                                                              │
</span><span class='line'>│                                                                              │
</span><span class='line'>│                     &lt;Select&gt;                     &lt;Finish&gt;                    │
</span><span class='line'>│                                                                              │
</span><span class='line'>└──────────────────────────────────────────────────────────────────────────────┘
</span></code></pre></td></tr></table></div></figure>


<p><code>Expand Filesystem</code>, と <code>Advanced Options -&gt; SSH -&gt; Enable</code> で．Finish して Reboot.</p>

<h1>ネットワーク設定</h1>

<p>無線LAN接続じゃないとやってられんので、<a href="http://www.amazon.co.jp/gp/product/B00JTSF8WO/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00JTSF8WO&amp;linkCode=as2&amp;tag=tac42-22">ELECOMのWDC-150SU2MWH</a> をつないでみた．
<a href="http://www.amazon.co.jp/gp/product/B010EGTPVY/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B010EGTPVY&amp;linkCode=as2&amp;tag=tac42-22">BuffaloのWLI-UC-GNME</a> も試したが、後述のプチ切れ対策を行っても、しばらくすると通信できなくなってしまった．</p>

<h2>ドングルの設定</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pi@raspberrypi:~$ lsusb
</span><span class='line'>Bus 001 Device 004: ID 0411:01a2 BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM Wireless LAN Adapter [Ralink RT8070]
</span><span class='line'>Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
</span><span class='line'>Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
</span><span class='line'>Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span></code></pre></td></tr></table></div></figure>


<p><code>ID 0411:01a2</code> として認識出来てるっぽい． 設定は<a href="https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md">こちら</a>を参照．
以下でAP一覧を確認できる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pi@raspberrypi:~$ sudo iwlist wlan0 scan | less
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/wpa_supplicant/wpa_supplicant.conf</code> を修正し、APの設定を追加する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pi@raspberrypi:~<span class="nv">$ </span>sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- wpa_supplicant.conf.org 2015-11-21 22:17:56.359999815 +0000</span>
</span><span class='line'><span class="gi">+++ /etc/wpa_supplicant/wpa_supplicant.conf     2015-11-21 22:19:14.759999785 +0000</span>
</span><span class='line'><span class="gu">@@ -1,2 +1,6 @@</span>
</span><span class='line'> ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
</span><span class='line'> update_config=1
</span><span class='line'><span class="gi">+network={</span>
</span><span class='line'><span class="gi">+    ssid=&quot;The_ESSID_from_earlier&quot;</span>
</span><span class='line'><span class="gi">+    psk=&quot;Your_wifi_password&quot;</span>
</span><span class='line'><span class="gi">+}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ifの再起動</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pi@raspberrypi:~<span class="nv">$ </span>sudo ifdown wlan0 <span class="o">&amp;&amp;</span> sudo ifup wlan0
</span></code></pre></td></tr></table></div></figure>


<p>確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pi@raspberrypi:~<span class="nv">$ </span>ifconfig wlan0
</span><span class='line'>wlan0     Link encap:Ethernet  HWaddr cc:e1:d5:3e:2a:97
</span><span class='line'>          inet addr:192.168.11.110  Bcast:192.168.11.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::fe15:1190:9afa:732b/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:18 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:30 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:2944 <span class="o">(</span>2.8 KiB<span class="o">)</span>  TX bytes:5250 <span class="o">(</span>5.1 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>つながったっぽい．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ping 192.168.11.110
</span><span class='line'>ING 192.168.11.110 <span class="o">(</span>192.168.11.110<span class="o">)</span>: <span class="m">56</span> data bytes
</span><span class='line'><span class="m">64</span> bytes from 192.168.11.110: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nb">time</span><span class="o">=</span>1.043 ms
</span><span class='line'><span class="m">64</span> bytes from 192.168.11.110: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nb">time</span><span class="o">=</span>1.289 ms
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>きたきた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh 192.168.11.110
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.11.110 (192.168.11.110)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is SHA256:...</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.11.110<span class="err">&#39;</span> <span class="o">(</span>ECDSA<span class="o">)</span> to the list of known hosts.
</span><span class='line'>
</span><span class='line'>pi@raspberrypi:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>きたー！！</p>

<p>しばらくほっとくと勝手に切れちゃうので、省電力機能を無効化する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pi@raspberrypi:~<span class="nv">$ </span>sudo nano /etc/modprobe.d/8192cu.conf
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ options 8192cu rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>電力アップ</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo nano /boot/config.txt
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ safe_mode_apio=4</span>
</span><span class='line'><span class="gi">+ max_usb_current=1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>pi@raspberrypi:~$ sudo reboot
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://sig9.hatenablog.com/entry/2015/08/22/233646">http://sig9.hatenablog.com/entry/2015/08/22/233646</a>
<a href="http://denshikousaku.net/fix-sluggish-response-of-raspberry-pi-wifi-adaptor">http://denshikousaku.net/fix-sluggish-response-of-raspberry-pi-wifi-adaptor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressで記事を書くには]]></title>
    <link href="https://www.tac42.net/blog/other/2016/01/02/how-to-write-octopress/"/>
    <updated>2016-01-02T02:27:30+09:00</updated>
    <id>https://www.tac42.net/blog/other/2016/01/02/how-to-write-octopress</id>
    <content type="html"><![CDATA[<p><img src="https://cdn.tutsplus.com/webdesign/authors/ian-yates/octopress-header.png" alt="" /></p>

<p>備忘録です．Octopressに乗り換えたものの，環境構築忘れるとあれなので．</p>

<p><a href="https://tac0x2a.github.io/">https://tac0x2a.github.io/</a></p>

<h2>セットアップ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:tac0x2a/tac0x2a.github.io.git
</span><span class='line'>$ cd tac0x2a.github.io
</span><span class='line'>$ git checkout source
</span><span class='line'>$ rbenv exec bundle install
</span><span class='line'>$ git clone git@github.com:tac0x2a/tac0x2a.github.io.git _deploy</span></code></pre></td></tr></table></div></figure>


<h2>記事を書く</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv exec rake new_post\['Entry Title'\] # source/_posts 以下にファイルが出来る
</span><span class='line'>$ emacs source/_posts/&lt;yyyy-mm-dd-&gt;'EntryTitle'.markdown</span></code></pre></td></tr></table></div></figure>


<h2>記事を確認する</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv exec rake preview
</span><span class='line'>$ open http://localhost:4000</span></code></pre></td></tr></table></div></figure>


<h2>Sourceにコミット</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add source/_posts/&lt;yyyy-mm-dd-&gt;'EntryTitle'.markdown
</span><span class='line'>$ git commit -m "Add new post."
</span><span class='line'>$ git push origin source:source</span></code></pre></td></tr></table></div></figure>


<h2>記事を公開する</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv exec rake gen_deploy #masterブランチに_deploy以下がpushされる</span></code></pre></td></tr></table></div></figure>


<p>たぶんあってる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年のまとめ]]></title>
    <link href="https://www.tac42.net/blog/other/2015/12/31/conclusion2015/"/>
    <updated>2015-12-31T23:59:25+09:00</updated>
    <id>https://www.tac42.net/blog/other/2015/12/31/conclusion2015</id>
    <content type="html"><![CDATA[<p>GooglePhotoを見ながら2015年を振り返り．ごった煮です．</p>

<h2>1Q(1月から3月)</h2>

<ul>
<li>石川へ行く(1回目)</li>
<li><p>beatmania IIDX 関連のOSSを3つリリース．全部Ruby．</p>

<ul>
<li>プレーデータ取得用のライブラリ - <a href="https://github.com/tac0x2a/iidx_lib">tac0x2a/iidx_lib</a></li>
<li>プレー結果通知ツール - <a href="https://github.com/tac0x2a/iidx_play_notifier">tac0x2a/iidx_play_notifier</a></li>
<li>プレー結果確認サービス - <a href="https://github.com/tac0x2a/iidx_play_viewer">tac0x2a/iidx_play_viewer</a></li>
</ul>


<p>ちなみに，2015/12/31現在，<a href="http://p.eagate.573.jp/">KONAMI eAMUSEMENT</a> へのログインには画像認証が必須となったため，上記は動作しなくなりました．．．残念．</p></li>
<li><p>こつこつプレーしていた<a href="http://sq4.atlusnet.jp/">世界樹の迷宮4</a>を遂にクリアする．(2012年7月発売なので，約2.5年)</p></li>
</ul>


<h2>2Q(4月から6月)</h2>

<ul>
<li>ちょっといいことが起こる．</li>
<li>京都植物園へ行く．ラフレシアがすごい．</li>
<li><a href="http://nku.chu.jp/bettyrotation/">某イベント</a> に参加するため石川へ行く(2回目).</li>
<li>IPAのES試験になんとか合格！(が，後述の配置転換で組込み開発から離れることに．．．)</li>
<li><p>Ruby製のWebスクレイピングライブラリ Yasuri をリリース - <a href="https://github.com/tac0x2a/yasuri">tac0x2a/yasuri</a></p>

<p>それなりに反響をいただき，<a href="http://qiita.com/tac0x2a/items/69ac8a33b0a8a3d46edd">Qiitaのエントリ</a>はストック数，はてブ数とも過去最高となりました．皆さんありがとうございます．</p></li>
<li>京都水族館へ行く．イルカショーでなかなか笛が鳴らなかった思い出．</li>
<li><p>自転車で琵琶湖を一周．例年通り後輩と2人で．</p>

<p><img src="https://www.tac42.net/assets/blog/2015-12-31-conclusion2015/bike.jpg" alt="びわいち" /></p></li>
</ul>


<h2>3Q(7月から9月)</h2>

<ul>
<li><a href="http://regional.rubykaigi.org/kansai06/">Kansai Rubykaigi 06</a> に参加． Matzと2ショット撮ってもらってめっちゃ嬉しい．</li>
<li>ついに28歳になってしまう．</li>
<li>某イベントのため品川へ．ステージに呼び出されて脱ぎたてTシャツをもらう．</li>
<li>郡上八幡へ行く．水が綺麗．</li>
<li><p>鳥羽水族館へ行く．ペンギンが近すぎて楽しい．</p>

<p><img src="https://www.tac42.net/assets/blog/2015-12-31-conclusion2015/penguin.jpg" alt="近い" /></p></li>
</ul>


<h2>4Q(10月から12月)</h2>

<ul>
<li>配置転換で遂に職業プログラマではなくなってしまう．</li>
<li>ETロボコン地区大会にスタッフ参加．なぜか司会に．</li>
<li><a href="http://nku.chu.jp/bettyrotation/">某イベント#2</a> に参加するため石川へ行く(3回目).</li>
<li>勢いでIPAのNWを受けるも轟沈．やはり勉強しないと合格出来ない．</li>
<li>勢いで浜松へ．うなぎとゆるきゃらグランプリを堪能．</li>
<li>海遊館へ行く．マンボウが大きい．</li>
<li>忘年会のため，石川へ行く(4回目) ぶりしゃぶ．</li>
<li><p>奥能登を堪能するため，石川へ行く(5回目) 波の花がふわふわ．</p>

<p><img src="https://www.tac42.net/assets/blog/2015-12-31-conclusion2015/wave_flower.jpg" alt="波の花" /></p></li>
<li><p>Jekyll + Github Pages で慌ててこのまとめを書く←今ここ</p></li>
</ul>


<h2>まとめ</h2>

<ul>
<li>Rubyのライブラリを何本かリリースできた．良かった．</li>
<li>石川へ行き過ぎ．</li>
<li>水族館へ行き過ぎ．</li>
</ul>


<h2>2016年はどうするの？</h2>

<ul>
<li>仕事の内容が大きく変わったのでうまく活かしたい．</li>
<li>Ruby以外の言語でOSSをリリースしたい．</li>
</ul>

]]></content>
  </entry>
  
</feed>
