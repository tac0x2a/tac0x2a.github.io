<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Make_online_judge | tac42.net]]></title>
  <link href="https://www.tac42.net/blog/categories/make-online-judge/atom.xml" rel="self"/>
  <link href="https://www.tac42.net/"/>
  <updated>2020-01-01T02:30:55+09:00</updated>
  <id>https://www.tac42.net/</id>
  <author>
    <name><![CDATA[TAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS導入]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/04/24/makeonlinejudgev11/"/>
    <updated>2016-04-24T14:30:27+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/04/24/makeonlinejudgev11</id>
    <content type="html"><![CDATA[<p>随分間が空きましたがこつこつ進めてますよ！</p>

<p>npm で AngularJS 入れると node_modulesの下に入ってしまい面倒なのでBowerを使ってみることに。</p>

<ul>
<li><a href="http://qiita.com/okmttdhr/items/1caff5a36c8468779a64">ここ数年前から2015/5までのモダンフロントエンドを総まとめしてみた</a></li>
</ul>


<blockquote><p>Angular.js 2.0やReact.jsなど、ES6の流れをくんでいるスクリプトは、Node.jsの世界で完結させることができるので、今後Bowerは使いドコロが減ってゆきそうです。</p></blockquote>

<p>ぐぬぬ。初心者なのでちょっと枯れてるくらいが丁度いいんですよ！</p>

<h2>Bower 入れる</h2>

<p><img src="http://bower.io/img/bower-logo.svg" alt="Bower" /></p>

<p>アイコンかわいい！</p>

<p>Bowerはフロントエンドで使われるパッケージマネージャ。npmはバックエンド(Node.js)用と考えておけばOKっぽい。</p>

<ul>
<li><a href="http://bower.io/">Bower - A package manager for the web</a></li>
<li><a href="http://qiita.com/megane42/items/2ab6ffd866c3f2fda066">npm とか bower とか一体何なんだよ！Javascript 界隈の文脈を理解しよう</a></li>
</ul>


<pre><code class="sh">$ npm install -g bower
</code></pre>

<p>以下の内容で<code>.bowerrc</code>を作る。
<code>json
{
  "directory": "public/components",
  "json": "bower.json"
}
</code></p>

<pre><code class="sh">$ bower init
</code></pre>

<h2>余計な静的ファイルを見えないようにする</h2>

<p>bowerのパッケージをpublicの下にしたので、<code>app.js</code>の静的ファイルのルーティングを修正して、余計なファイル(Bowerde入れたパッケージのREADME.mdとか)を見えないように、必要な物だけ見せるように設定する。
<code>diff
-app.use(express.static(path.join(__dirname, 'public')));
+app.use('/images', express.static(path.join(__dirname, 'public','images')));
+app.use('/javascripts',express.static(path.join(__dirname, 'public','javascripts')));
+app.use('/stylesheets',express.static(path.join(__dirname, 'public','stylesheets')));
+app.use('/semantic',express.static(path.join(__dirname, 'public','semantic')));
+app.use('/angular',express.static(path.join(__dirname, 'public','components','angular')));
</code></p>

<h2>AngularJSを入れる</h2>

<pre><code class="sh">$ bower install --save angular
</code></pre>

<p>あとは以下を参考に。</p>

<ul>
<li><a href="http://qiita.com/naga3/items/e63144e17cb1ab9e03e9">MongoDB+Express+AngularJS+Node.jsでシンプルなCRUDアプリ作成</a></li>
</ul>


<h1>小ネタ</h1>

<h2>ファイル変更で自動サーバ再起動</h2>

<pre><code>$ npm install -g nodemon
</code></pre>

<p>以下のコマンドで起動する。
<code>
$ nodemon ./bin/www
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テストフレームワークを導入する(mocha)]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/04/13/makeonlinejudgev10/"/>
    <updated>2016-04-13T08:04:24+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/04/13/makeonlinejudgev10</id>
    <content type="html"><![CDATA[<p>ユーザのサインアップ、ログイン・ログアウトを実装できたので
いよいよ本格的に機能を作りこんでいきたいのですが、
やはりテストが無いと不安です。</p>

<h1>Mocha</h1>

<p>比較的シンプルそうなテストフレームワーク <a href="http://mochajs.org/">mocah</a> を導入します。</p>

<ul>
<li><a href="http://mochajs.org/">Mocha</a></li>
</ul>


<pre><code>$ npm install -g mocha --save-dev
</code></pre>

<p>さっそく動かしてみる.</p>

<pre><code>$ mkdir test
$ touch test/test.js
</code></pre>

<pre><code class="js">var assert = require("chai").assert
describe('Array', function() {
  describe('#indexOf()', function () {
    it('should return -1 when the value is not present', function () {
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    });
  });
});
</code></pre>

<pre><code>$ mocha
</code></pre>

<pre><code>Array
  #indexOf()
    1) should return -1 when the value is not present

0 passing (14ms)
1 failing

1) Array #indexOf() should return -1 when the value is not present:
   ReferenceError: assert is not defined
    at Context.&lt;anonymous&gt; (test/test.js:4:7)
</code></pre>

<p>お、動いてるっぽい。
ちなみにアサーションにはChaiを使っています。</p>

<ul>
<li><a href="http://chaijs.com/">Chai</a></li>
</ul>


<pre><code class="js">var assert = require("chai").assert
</code></pre>

<p>Chaiは他にも <code>expect</code> や <code>should</code> を使った書き方もサポートしています。
<code>should</code> や <code>expect</code> はRspecで使っていましたが冗長になりがちだったので、今回はassertを使ってみようと思います。</p>

<h1>CIに乗せる</h1>

<p>いつものTravis-CIで。</p>

<ul>
<li><a href="https://travis-ci.org/">Travis CI</a></li>
<li><a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs">Building a Node.js project</a></li>
</ul>


<p>以下の内容で <code>.travis.yml</code> をリポジトリのルートに作る。</p>

<pre><code class="yml">language: node_js
node_js:
  - "5.9.0"
</code></pre>

<p>TravisCIは <code>npm test</code> を叩いてテストするので、<code>package.js</code> に以下を加える。
<code>js
{
...
  "scripts": {
    "test": "mocha"
  },
...
}
</code></p>

<p>TravisCIでリポジトリを有効にしてビルド。<code>README.md</code>にバッジを追記する。</p>

<pre><code>......
$ npm test
&gt; WitchCoder@0.0.0 test /home/travis/build/tac0x2a/WitchCoder
&gt; mocha
  login
    /return
  ✓ should be return error when email is empty
  ✓ should be return error when name is empty
  ✓ login failed if user not found
  ✓ login failed if password is not matched
  4 passing (14ms)
The command "npm test" exited with 0.
Done. Your build exited with 0.
</code></pre>

<p>動いてる！いい感じ〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expressでバックエンドを作る(ユーザ認証まで)]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/30/makeonlinejudgev09/"/>
    <updated>2016-03-30T00:39:31+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/30/makeonlinejudgev09</id>
    <content type="html"><![CDATA[<p>しばらくこのエントリに追記する形で進める。</p>

<h1>express-generator</h1>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1503/04/news047.html">Node.jsのMVCフレームワーク「Express」の基礎知識とインストール</a></li>
</ul>


<p><code>express-generator</code> コマンドでプロジェクトの雛形が作れるらしい。
前回の <code>app.json</code> の代わりに、上記で置き換えることにした。</p>

<pre><code>$ npm install exress-generator
$ express judgesv_app_prototype
$ cd judgesv_app_prototype &amp;&amp; npm install
</code></pre>

<p>実行する場合は、</p>

<pre><code>$ npm start
</code></pre>

<p>これで、<code>package.json</code> に書かれている通り、<code>node ./bin/www</code> が実行されて起動するようになった。</p>

<h1>まずはともかくユーザ認証</h1>

<h2>ユーザ登録画面を作る</h2>

<h3>SemanticUI を導入</h3>

<p>これまではCSSに<a href="http://getbootstrap.com/">Bootstrap</a>ばかり使っていたのですが、今回は<a href="http://semantic-ui.com/">SemanticUI</a>を使ってみることに。</p>

<p>ビルドするのにgulpが必要なのでインストールする。
<code>
$ npm install -g gulp
</code></p>

<pre><code>$ npm install semantic-ui --save
</code></pre>

<p>途中いろいろ聞かれたが、<code>Express</code> を選択し、packageは全て選択した。</p>

<pre><code>$ cd semantic/
$ gulp build
</code></pre>

<p>これで必要なファイルが生成された。読み込むようheadを修正する。</p>

<pre><code>doctype html
html
  head
    title= title
    link(rel='stylesheet', type='text/css' href='semantic/dist/semantic.min.css')
    script(src='semantic/dist/semantic.min.js')

  body
    block content
</code></pre>

<p><img src="/assets/blog/2016-04-05-express/signup.png" alt="Signup" /></p>

<p>こんなかんじになった。</p>

<h2>ユーザ登録処理を作る</h2>

<p>サインアップされたユーザをMongoDBに作成する。</p>

<h3>Mongoose</h3>

<p>MongoDB用のORMとしてMongooseがあるのでこれを使う。
まずはユーザ名とメールアドレスをDBに登録できるところまで確認。</p>

<pre><code class="js">// app.js

// Connect to DB
var mongoose   = require('mongoose');
mongoose.connect('mongodb://mongo/judge_sv');
</code></pre>

<pre><code class="js">// routes/signup.js

router.post('/return', function(req, res, next) {
    console.log(req.body);

    var name  = req.body.name;
    var email = req.body.email;

    User.create({ name: name, email: email}, function (err, user) {
      if (err) return handleError(err);
      //return done(err, user);
    });

    res.redirect('/signup');
});
</code></pre>

<pre><code>$ mongo
&gt; use judge_sv
&gt; db.users.find()
</code></pre>

<p>上で登録したユーザのレコードが表示されている！</p>

<h3>バリデーションを追加する</h3>

<p>以下の場合にエラーになるよう、バリデーション処理を追加する</p>

<ul>
<li>ユーザ名、メールアドレス、パスワードのいずれか1つ以上が未入力の場合</li>
<li>メールアドレスが既に使用されている場合</li>
<li>パスワードと再入力したパスワードが不一致の場合</li>
</ul>


<p>メールアドレスでユーザを識別したいので、ユニークになるように。</p>

<ul>
<li><a href="http://mongoosejs.com/docs/validation.html">Mongoose Validation</a></li>
<li><a href="http://qiita.com/zaru/items/77eb53cf37c4ea842f32">Node.js+Express4でMongoDBを使う＆バリデーションする</a></li>
</ul>


<pre><code>$ npm install mongoose-unique-validator --save
</code></pre>

<pre><code class="js">// user.model.js
var UserSchema = new Schema({
  name:     { type: String, required: "Name is needed." },
  email:    { type: String, required: "Email is needed.", lowercase: true, unique: true },
  password: { type: String, required: "Password is needed." },
});
UserSchema.plugin(uniqueValidator, {message: "This Email address is already used."})
</code></pre>

<pre><code class="js">// routes/signup.js

router.post('/return', function(req, res, next) {

    var name       = req.body.name;
    var email      = req.body.email;
    var password   = auth.getHash(req.body.password);
    var password_a = auth.getHash(req.body.password_again);

    //Check password input
    if(req.body.password == ""){
      res.render('signup', {
        name: name, email: email, errors: {password: "Need password."}
      });
    }
    if(req.body.password_again == ""){
      res.render('signup', {
        name: name, email: email, errors: {password_again: "Need password again." }
      });
    }
    if(password != password_a){
      var message = "Is not matched password and again.";
      console.log(message)
      res.render('signup', {
        name: name, email: email, errors: {email_eq: message }
      });
    }

    // User model validation
    User.create({name: name, email: email, password: password}, function (err, user) {
      if (err){
        console.log("Error:", err.errors);
        res.render('signup', {
          name: name,
          email: email,
          errors: err.errors
        });
      } else {
        //Todo: create session
        console.log("Created User:", user.name, "/", user.email);
        res.redirect('/signup');
      }
    });
});
</code></pre>

<p>あとはView側で <code>errors</code> に何か入っていたらエラー表示するようにすればOK。</p>

<h3>セッションを張る</h3>

<ul>
<li><a href="http://qiita.com/hoshi-takanori/items/7f5602d7fd7ee0fa6427#2-8">Express 4 のログ出力とフォームの処理 - セッション</a></li>
</ul>


<pre><code>$ npm install express-session --save
</code></pre>

<h2>ユーザ認証を実装する</h2>

<p>以前調べた<a href="http://knimon-software.github.io/www.passportjs.org/">Passport</a>を使ってみる。</p>

<pre><code>$ npm install passport --save
</code></pre>

<h3>Local認証</h3>

<p>まずは素朴にメールアドレスとパスワードで認証してみる。</p>

<ul>
<li><p><a href="http://passportjs.org/docs/">Passport - Documentation</a></p></li>
<li><p><a href="http://kikuchy.hatenablog.com/entry/2013/07/03/042221">Express + Passport でお手軽ユーザー認証</a></p></li>
</ul>


<pre><code>$ npm install passport-local --save
</code></pre>

<h3>Google OAuth2</h3>

<p>外部サービスのOAuth2も簡単に実装できるらしい。
ためしに、Googleアカウントを使用した認証を実装してみる。</p>

<ul>
<li><a href="https://github.com/barberboy/passport-google-oauth2-example">https://github.com/barberboy/passport-google-oauth2-example</a></li>
</ul>


<pre><code>$ npm install passport-google-oauth --save
</code></pre>

<h4>GoogleAPIs</h4>

<ul>
<li><a href="https://console.developers.google.com/project">https://console.developers.google.com/project</a></li>
</ul>


<p>新しいプロジェクトを作成して、新しく認証情報を作成する。(OAuthクライアントID)</p>

<p><code>承認済みのJavaScript生成元</code>, <code>承認済みのリダイレクトURI</code> は空白のままでOK。</p>

<p>redirect_uri_mismatchで認証できなかったが、GoogleAPIsでリダイレクトURLが設定できてなかったため。 <a href="http://perl.no-tubo.net/2013/09/27/netgoogleanalyticsoauth2-%E3%81%A7%E3%80%8C%E3%82%A8%E3%83%A9%E3%83%BCredirect_uri_mismatch%E3%80%8D%E3%81%A3%E3%81%A6%E8%A8%80%E3%82%8F%E3%82%8C%E3%81%A6refresh_access_token%E3%81%8C%E5%8F%96/">こちら</a>を参考。</p>

<p>今度はコールバックされた先で<code>failed to fetch user profile</code>のエラー。GoogleAPIsで作ったプロジェクトで<code>Google+ API</code>を有効にすればよい。<a href="https://github.com/jaredhanson/passport-google-oauth/issues/46">こちら</a>を参考。</p>

<h2>おまけ</h2>

<h3>MongoDB</h3>

<h4>Macで起動するには</h4>

<ul>
<li><a href="http://qiita.com/hajimeni/items/3c93fd981e92f66a20ce">Macにhomebrewを使ってmongodbをインストール</a></li>
</ul>


<pre><code>$ brew install mongodb
</code></pre>

<pre><code>$ mongod --config /usr/local/etc/mongod.conf
</code></pre>

<h4>Ubuntu14.04にインストール出来ない</h4>

<p>正確には、インストールできるんだけど、サービスが登録されないです。</p>

<p><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/#install-mongodb-community-edition">MongoDBのInstallation</a>に従って進めてみましたが
<code>/etc/init.d/</code> 以下にそれらしいファイルが作られておらず、<code>start service mongodb</code> しても、サービスが見つからない旨のメッセージが出ていました。</p>

<p>どうやら、パッケージとして <code>mongodb-org</code> よりも <code>mongodb</code> を指定する方が良さそうです。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/28945921/e-unable-to-locate-package-mongodb-org">E: Unable to locate package mongodb-org / stackover flow</a></li>
</ul>


<p>私の環境でも上記でサービス起動できるようになりました。</p>

<h3>Dockerのコンテナから名前が引けない</h3>

<pre><code>Step 4 : RUN apt-get update -y
 ---&gt; Running in 78957f038aed
Err http://archive.ubuntu.com trusty InRelease

Err http://archive.ubuntu.com trusty-updates InRelease

Err http://archive.ubuntu.com trusty-security InRelease

Err http://archive.ubuntu.com trusty Release.gpg
  Could not resolve 'archive.ubuntu.com'
Err http://archive.ubuntu.com trusty-updates Release.gpg
  Could not resolve 'archive.ubuntu.com'
Err http://archive.ubuntu.com trusty-security Release.gpg
  Could not resolve 'archive.ubuntu.com'
...
</code></pre>

<p>DockerMachineが起動したまま別の環境に移動したからかも。
<code>docker-machine restart</code> したら治った。</p>

<p>一通り認証まで実装できたので本エントリは終了。
意外といい感じに進んできてるので、プロトタイプから格上げすることに。</p>

<ul>
<li><a href="https://github.com/tac0x2a/WitchCoder">tac0x2a/WitchCoder</a></li>
</ul>


<p>Wizardに対抗してWitch。。。。次回に続く！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロトタイプを作ろう]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/28/makeonlinejudgev08/"/>
    <updated>2016-03-28T22:22:25+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/28/makeonlinejudgev08</id>
    <content type="html"><![CDATA[<h1>まずはプロトタイプ</h1>

<p>前回なんとかDockerで実行環境兼開発環境を構築できました。
とにかく早く作ってみたいので、プロトタイプという体で手を動かしてみます。
どうせ作り直したくなってくるので、最初は適当にやってみようというかんじ。死にゲー。</p>

<h2>Expressの環境構築</h2>

<pre><code>$ nvm use v5.9.0
$ npm init
$ npm install --save-dev express
</code></pre>

<p><code>--save-dev</code> オプションを付けておくと、インストールしたパッケージを<code>package.js</code>へ自動で追記してくれます。便利！</p>

<h2>アプリを書いてみる</h2>

<p><code>app.js</code> という名前で以下のファイルを作った。</p>

<pre><code class="js">var express = require('express');
var app = express();

// receive http request
app.get('/', function (req, res) {
  res.send("Hello, World");
});

// launch server
var server = app.listen(3000, function () {
  var host = server.address().address;
  var port = server.address().port;
  console.log("Judge server is started at http://%s:%s", host, port);
});
</code></pre>

<p>で、できあがったのがこれ。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_app_prototype">tac0x2a/judgesv_app_prototype</a></li>
</ul>


<h2>実行してみる</h2>

<pre><code>$ node app.js
$ curl http://:::3000
Hello, World
</code></pre>

<p>おおお、動いてる！</p>

<h1>Dockerで動かす</h1>

<p>これまでは直接Macで動かしていましたが、前回作ったDockerの実行環境で動かしてみます。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<pre><code>$ git clone git@github.com:tac0x2a/judgesv_devenv.git
$ cd judgesv_devenv/
$ git clone git@github.com:tac0x2a/judgesv_app_prototype.git data/work
$ docker-compose build
$ docker-compose pull
$ docker-compose up -d
</code></pre>

<p><code>data/work</code> が DataVolumeになっており、コンテナの <code>/home/devenv/work</code> にマウントされて、<code>node app.js</code> で実行されます。</p>

<p>エントリポイントが<code>app.js</code> 固定になってて気持ち悪いですが、何か設定ファイル等で指定する方法があるんだと思います。そのうち調べます。</p>

<p>はい、今回はここまで〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerによる環境構築]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/27/makeonlinejudgev07/"/>
    <updated>2016-03-27T23:23:06+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/27/makeonlinejudgev07</id>
    <content type="html"><![CDATA[<h1>開発/実行環境を作る</h1>

<p>とりあえず、Node.js, Express, MongoDBが動作する環境を作る。
他環境へ持って行ったり、どこかで自動テストできるように、
以下を参考にしながら開発/実行環境をDockerで作る。</p>

<ul>
<li><a href="http://blog.muuny-blue.info/7d128c1d4a33165a8676d1650d8ff828.html">docker-composeを使って最高の開発環境を手に入れた</a></li>
</ul>


<p>上記を参考に作ったらこんなかんじになった。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<h1>ところが・・・</h1>

<p>MongoDBのVolumeマウントでハマった。</p>

<pre><code>2016-03-27T16:58:37.013+0000 I CONTROL  [initandlisten] options: {}
2016-03-27T16:58:37.069+0000 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
2016-03-27T16:58:37.069+0000 I CONTROL  [initandlisten] dbexit:  rc: 100
</code></pre>

<ul>
<li><a href="http://qiita.com/ota42y/items/af90ada86fd671dc5122">MacのDocker上で動くMongoDBのデータを永続化するの大変そう</a></li>
</ul>


<blockquote><p>MongoDBはVirtualBoxの共有フォルダはサポートしていないようです。</p></blockquote>

<p>どうしよ。。。</p>

<h1>2016/03/28 追記</h1>

<p>mongoのイメージはそれほど頻繁に更新されんだろうと踏んで、とりあえずMongoDBはDataVolumeを諦めることに。</p>

<p>次回からいよいよアプリを作りますよー</p>
]]></content>
  </entry>
  
</feed>
