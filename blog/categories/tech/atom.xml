<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | tac42.net]]></title>
  <link href="https://www.tac42.net/blog/categories/tech/atom.xml" rel="self"/>
  <link href="https://www.tac42.net/"/>
  <updated>2016-04-02T13:02:19+09:00</updated>
  <id>https://www.tac42.net/</id>
  <author>
    <name><![CDATA[TAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expressでバックエンドを作る]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/30/makeonlinejudgev09/"/>
    <updated>2016-03-30T00:39:31+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/30/makeonlinejudgev09</id>
    <content type="html"><![CDATA[<p>しばらくこのエントリに追記する形で進める。</p>

<h1>express-generator</h1>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1503/04/news047.html">Node.jsのMVCフレームワーク「Express」の基礎知識とインストール</a></li>
</ul>


<p><code>express-generator</code> コマンドでプロジェクトの雛形が作れるらしい。
前回の <code>app.json</code> の代わりに、上記で置き換えることにした。</p>

<pre><code>$ npm install exress-generator
$ express judgesv_app_prototype
$ cd judgesv_app_prototype &amp;&amp; npm install
</code></pre>

<p>実行する場合は、</p>

<pre><code>$ npm start
</code></pre>

<p>これで、<code>package.json</code> に書かれている通り、<code>node ./bin/www</code> が実行されて起動するようになった。</p>

<h1>まずはともかくユーザ認証</h1>

<p>ユーザ認証を実装する。以前調べた <a href="http://knimon-software.github.io/www.passportjs.org/">Passport</a>を使ってみる。</p>

<h2>Google OAuth2</h2>

<p>ためしに、GoogleアカウントのOAuth2で認証してみる。</p>

<ul>
<li><a href="https://github.com/mstade/passport-google-oauth2">https://github.com/mstade/passport-google-oauth2</a></li>
</ul>


<pre><code>$ npm install passport-google-oauth2 --save-dev
</code></pre>

<h2>GoogleAPIs</h2>

<ul>
<li><a href="https://console.developers.google.com/project">https://console.developers.google.com/project</a></li>
</ul>


<p>新しいプロジェクトを作成して、新しく認証情報を作成する。(OAuthクライアントID)</p>

<p><code>承認済みのJavaScript生成元</code>, <code>承認済みのリダイレクトURI</code> は空白のままでOK。</p>

<p>redirect_uri_mismatchで認証できなかったが、GoogleAPIsでリダイレクトURLが設定できてなかったため。 <a href="http://perl.no-tubo.net/2013/09/27/netgoogleanalyticsoauth2-%E3%81%A7%E3%80%8C%E3%82%A8%E3%83%A9%E3%83%BCredirect_uri_mismatch%E3%80%8D%E3%81%A3%E3%81%A6%E8%A8%80%E3%82%8F%E3%82%8C%E3%81%A6refresh_access_token%E3%81%8C%E5%8F%96/">こちら</a>を参考。</p>

<p>今度はコールバックされた先で<code>failed to fetch user profile</code>のエラー。GoogleAPIsで作ったプロジェクトで<code>Google+ API</code>を有効にすればよい。<a href="https://github.com/jaredhanson/passport-google-oauth/issues/46">こちら</a>を参考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロトタイプを作ろう]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/28/makeonlinejudgev08/"/>
    <updated>2016-03-28T22:22:25+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/28/makeonlinejudgev08</id>
    <content type="html"><![CDATA[<h1>まずはプロトタイプ</h1>

<p>前回なんとかDockerで実行環境兼開発環境を構築できました。
とにかく早く作ってみたいので、プロトタイプという体で手を動かしてみます。
どうせ作り直したくなってくるので、最初は適当にやってみようというかんじ。死にゲー。</p>

<h2>Expressの環境構築</h2>

<pre><code>$ nvm use v5.9.0
$ npm init
$ npm install --save-dev express
</code></pre>

<p><code>--save-dev</code> オプションを付けておくと、インストールしたパッケージを<code>package.js</code>へ自動で追記してくれます。便利！</p>

<h2>アプリを書いてみる</h2>

<p><code>app.js</code> という名前で以下のファイルを作った。</p>

<pre><code class="js">var express = require('express');
var app = express();

// receive http request
app.get('/', function (req, res) {
  res.send("Hello, World");
});

// launch server
var server = app.listen(3000, function () {
  var host = server.address().address;
  var port = server.address().port;
  console.log("Judge server is started at http://%s:%s", host, port);
});
</code></pre>

<p>で、できあがったのがこれ。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_app_prototype">tac0x2a/judgesv_app_prototype</a></li>
</ul>


<h2>実行してみる</h2>

<pre><code>$ node app.js
$ curl http://:::3000
Hello, World
</code></pre>

<p>おおお、動いてる！</p>

<h1>Dockerで動かす</h1>

<p>これまでは直接Macで動かしていましたが、前回作ったDockerの実行環境で動かしてみます。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<pre><code>$ git clone git@github.com:tac0x2a/judgesv_devenv.git
$ cd judgesv_devenv/
$ git clone git@github.com:tac0x2a/judgesv_app_prototype.git data/work
$ docker-compose build
$ docker-compose pull
$ docker-compose up -d
</code></pre>

<p><code>data/work</code> が DataVolumeになっており、コンテナの <code>/home/devenv/work</code> にマウントされて、<code>node app.js</code> で実行されます。</p>

<p>エントリポイントが<code>app.js</code> 固定になってて気持ち悪いですが、何か設定ファイル等で指定する方法があるんだと思います。そのうち調べます。</p>

<p>はい、今回はここまで〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerによる環境構築]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/27/makeonlinejudgev07/"/>
    <updated>2016-03-27T23:23:06+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/27/makeonlinejudgev07</id>
    <content type="html"><![CDATA[<h1>開発/実行環境を作る</h1>

<p>とりあえず、Node.js, Express, MongoDBが動作する環境を作る。
他環境へ持って行ったり、どこかで自動テストできるように、
以下を参考にしながら開発/実行環境をDockerで作る。</p>

<ul>
<li><a href="http://blog.muuny-blue.info/7d128c1d4a33165a8676d1650d8ff828.html">docker-composeを使って最高の開発環境を手に入れた</a></li>
</ul>


<p>上記を参考に作ったらこんなかんじになった。</p>

<ul>
<li><a href="https://github.com/tac0x2a/judgesv_devenv">tac0x2a/judgesv_devenv</a></li>
</ul>


<h1>ところが・・・</h1>

<p>MongoDBのVolumeマウントでハマった。</p>

<pre><code>2016-03-27T16:58:37.013+0000 I CONTROL  [initandlisten] options: {}
2016-03-27T16:58:37.069+0000 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
2016-03-27T16:58:37.069+0000 I CONTROL  [initandlisten] dbexit:  rc: 100
</code></pre>

<ul>
<li><a href="http://qiita.com/ota42y/items/af90ada86fd671dc5122">MacのDocker上で動くMongoDBのデータを永続化するの大変そう</a></li>
</ul>


<blockquote><p>MongoDBはVirtualBoxの共有フォルダはサポートしていないようです。</p></blockquote>

<p>どうしよ。。。</p>

<h1>2016/03/28 追記</h1>

<p>mongoのイメージはそれほど頻繁に更新されんだろうと踏んで、とりあえずMongoDBはDataVolumeを諦めることに。</p>

<p>次回からいよいよアプリを作りますよー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsとExpress]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/26/makeonlinejudgev06/"/>
    <updated>2016-03-26T15:49:39+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/26/makeonlinejudgev06</id>
    <content type="html"><![CDATA[<p>前回はフロントエンドとしてAngular2のチュートリアルを軽く触ってみました。
今回はNode.js + Expressでバックエンドの環境を触ってみようと思います！</p>

<h1>Node.js</h1>

<p>どちらもちょっと古め。WebアプリのフレームワークとしてExpressを紹介している。
+ <a href="http://gihyo.jp/dev/serial/01/nodejs/0001">基礎から学ぶNode.js</a>
+ <a href="http://libro.tuyano.com/index2?id=1115003">ビギナーのための Node.jsプログラミング入門</a></p>

<h1>Express</h1>

<ul>
<li><a href="https://gist.github.com/mitsuruog/fc48397a8e80f051a145">express実践入門</a> - めちゃわかりやすい！</li>
</ul>


<blockquote><p>expressを理解する上での最小構成要素。
+ routing -
  外部からのHTTP(S)リクエストに対して、内部のロジックをマッピングすること。</p>

<ul>
<li>middleware -
routingの過程で何らかの処理を差し込む仕組み。
共通処理(認証、エラーハンドリング、リクエストデータの加工、etc)を本来のロジッ> クから分離して、コードベースを健全に保つ。</li>
</ul>
</blockquote>

<h2>Expressのキーワード</h2>

<ul>
<li>Jade - デファクトなテンプレートエンジン</li>
<li>Mongoose - MongoDBなORM</li>
<li>Sequelize - PostgreSQL, MySQL, SQLite, MSSQL なORM</li>
<li>Passport - node.jsの認証モジュールでデファクト</li>
</ul>


<h1>まとめ</h1>

<p>なんか作れそうな気がしてきた！
当面の方針として、Expressで作ってみて、フロントエンドをリッチにしたくなってきたらAngular2なりReactなりでViewを強化するようにしてみよう。
まずは、Node.js(Express)とDockerで</p>

<ul>
<li>ユーザ登録/認証</li>
<li>問題の登録

<ul>
<li>テストの登録</li>
</ul>
</li>
<li>回答の登録

<ul>
<li>ユーザごとの回答の履歴</li>
</ul>
</li>
<li>送信された回答とテストの実行</li>
</ul>


<p>このあたりを作りたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomを使おう]]></title>
    <link href="https://www.tac42.net/blog/make_online_judge/tech/2016/03/26/makeonlinejudgev05/"/>
    <updated>2016-03-26T01:19:06+09:00</updated>
    <id>https://www.tac42.net/blog/make_online_judge/tech/2016/03/26/makeonlinejudgev05</id>
    <content type="html"><![CDATA[<h1>パッケージ</h1>

<ul>
<li>sync-settings - <a href="http://qiita.com/T_M/items/0fb0804eb1fd256aac4e">Atomの設定を同期する</a>。</li>
<li>atomic-emacs - Emacsのキーバインド</li>
<li>emacs-plus   - Emacsのキーバインド</li>
<li>disable-keybindings - Emacsのキーバインドとぶつかっているキーを無効にする。</li>
<li>ruby-block - Rubyのblockをハイライトしてくれる</li>
<li>file-icons - ファイルツリーのアイコンを見やすく</li>
<li>project-manager - 複数プロジェクトを記憶して切り替える</li>
<li><a href="https://atom.io/packages/minimap">minimap</a> - スクロールバーの位置にソースコードの全体像を表示する</li>
<li>atom-typescript - TypeScript用のplugin. 機能多すぎてよくわからんけど凄い</li>
</ul>


<p>コマンドでインストールするには</p>

<pre><code>apm install sync-settings
apm install atomic-emacs
apm install emacs-plus
apm install disable-keybindings
apm install ruby-block
apm install file-icons
apm install project-manager
</code></pre>

<h2>sync-settings</h2>

<ul>
<li>GistのIDとGitHubのAccessTokenをそれぞれ設定する。</li>
<li>コマンドパレットを開いて(<code>Cmd+Shift+p</code>) <code>Sync Settings:Restore</code> でgistから設定をリストアする。</li>
</ul>


<h2>disable-keybindings</h2>

<ul>
<li>All Community Packages にチェック入れる。</li>
<li>Except Community Packages に <code>atomic-emacs, emacs-plus</code> を設定する。</li>
<li>Prefix Keys に <code>ctrl-k</code> を設定する。</li>
</ul>


<h1>テーマ</h1>

<h2><code>robin-hood-syntax</code></h2>

<p><img src="https://i.github-camo.com/ab5bd775f86c75113818f712d96c55ba934e1cf8/68747470733a2f2f6769746875622e636f6d2f617a61742d696f2f61746f6d2d726f62696e2d686f6f642d73796e7461782f626c6f622f6d61737465722f696d616765732f68746d6c2e706e673f7261773d74727565" alt="" />
<img src="https://i.github-camo.com/e16edf8a04d83900fd3cb9d6907fe8b677e051e7/68747470733a2f2f6769746875622e636f6d2f617a61742d696f2f61746f6d2d726f62696e2d686f6f642d73796e7461782f626c6f622f6d61737465722f696d616765732f6373732e706e673f7261773d74727565" alt="" /></p>

<h1>その他</h1>

<p>Markdownプレビューのフォントを変更する。
+ AP<a href="http://tanksuzuki.com/post/atom-markdown-style/">AtomでカッコよくMarkdown PreviewするためのCSS</a></p>

<p>ここまで。気が向いたら追記する。</p>
]]></content>
  </entry>
  
</feed>
